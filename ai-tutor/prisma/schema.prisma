// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String      @unique
  password      String?
  profileImage  String      @default("/images/profile/dog.png")
  gradeLevel    String?
  learningStyle String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  classrooms    Classroom[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  role             String   // Changed from enum to String to match the data
  subject          String
  gradeLevel       String
  textbookUrl      String?
  syllabusUrl      String?
  notice           String?   // Optional notice field
  studyPreferences Json      // Contains: daysPerWeek, numberWeekTotal, hoursPerSession, learningStyle
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  timetable        Timetable?
  notes            Note[]    // One-to-many relation
  textbook         Textbook? // 1:1 link with cascade delete
  @@index([userId])
}

model Timetable {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  classroomId String   @unique @db.ObjectId
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  schedule    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Note {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  classroomId String    @db.ObjectId
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  name        String    @default("Note")
  content     String
  color       String?   // e.g. "green", "pink", "yellow", etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Textbook {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  classroomId String    @unique @db.ObjectId
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  title       String?   @default("Textbook")
  source      String?
  documentId  String    // matches GridFS filename / embedding ID
  uri         String    // access URL or GridFS info
  uploadedAt  DateTime  @default(now())
}
